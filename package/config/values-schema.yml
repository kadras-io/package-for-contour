#@data/values-schema
---
#@schema/desc "The underlying infrastructure provider. Options are `aws`, `azure`, `local` and `vsphere`. This field is not required, but it enables better validation and defaulting if provided."
#@schema/validation one_of=["aws", "azure", "local", "vsphere"]
#@schema/nullable
infrastructureProvider: ""

#@schema/desc "The namespace in which to deploy Contour and Envoy."
#@schema/validation min_len=1
namespace: projectcontour

#@schema/desc "Settings for the Contour component."
contour:
  #@schema/desc "The number of Contour replicas. In order to enable high availability, it should be greater than 1."
  #@schema/validation min=1
  replicas: 2
  #@schema/desc "Configuration for the Contour Deployment."
  config:
    #@schema/desc "Log output format for Contour. Either `text` (default) or `json`."
    #@schema/validation one_of=["json", "text"]
    logFormat: text
    #@schema/desc "The Contour log level. Valid options are `info` and `debug`."
    #@schema/validation one_of=["info", "debug"]
    logLevel: info
    #@schema/desc "Whether to enable PROXY protocol for all Envoy listeners."
    useProxyProtocol: false
  #@schema/desc "The YAML contents of the Contour config file. See https://projectcontour.io/docs/latest/configuration/#configuration-file for more information."
  #@schema/type any=True
  configFileContents: {}

#@schema/desc "Settings for the Envoy component."
envoy:
  #@schema/desc "Envoy workload settings."
  workload:
    #@schema/desc "The type of Kubernetes workload that Envoy is deployed as. Options are `Deployment` or `DaemonSet`. If not specified, it defaults to `DaemonSet`."
    #@schema/validation one_of=["Deployment", "DaemonSet"]
    type: DaemonSet
    #@schema/desc "The number of Envoy replicas to deploy when `type` is set to `Deployment`."
    #@schema/validation min=1, when=lambda _, ctx: ctx.parent["type"] == "Deployment"
    replicas: 2
    #@schema/desc "Host port settings for the Envoy pods."
    hostPorts:
      #@schema/desc "Whether to enable host ports. If false, http & https are ignored."
      enabled: false
      #@schema/desc "If enabled, the host port number to expose Envoy's HTTP listener on."
      #@schema/validation min=1, when=lambda _, ctx: ctx.parent["enabled"]
      http: 80
      #@schema/desc "If enabled, the host port number to expose Envoy's HTTPS listener on."
      #@schema/validation min=1, when=lambda _, ctx: ctx.parent["enabled"]
      https: 443
    #@schema/desc "Whether to enable host networking for the Envoy pods."
    hostNetwork: false 
    #@schema/desc "The termination grace period, in seconds, for the Envoy pods."
    #@schema/validation min=30
    terminationGracePeriodSeconds: 300

  #@schema/desc "Configuration for the Envoy workload."
  config:
    #@schema/desc "The Envoy log level."
    #@schema/validation one_of=["trace", "debug", "info", "warning", "warn", "error", "critical", "off"]
    logLevel: info

  #@schema/desc "Envoy service settings."
  service:
    #@schema/desc "The type of Kubernetes service to provision for Envoy. If not specified, it will default to `NodePort` for local and vsphere and `LoadBalancer` for others."
    #@schema/validation one_of=["NodePort", "ClusterIP", "LoadBalancer"], when=lambda _, ctx: not ctx.root["infrastructureProvider"]
    #@schema/nullable
    type: ""
    #@schema/desc "The desired load balancer IP. If `type` is not `LoadBalancer', this field is ignored. It is up to the cloud provider whether to honor this request. If not specified, then load balancer IP will be assigned by the cloud provider."
    loadBalancerIP: ""
    #@schema/desc "The external traffic policy for the Envoy service. If type is `ClusterIP`, this field is ignored. Otherwise, it defaults to `Cluster` for vsphere and `Local` for others."
    #@schema/validation one_of=["Cluster", "Local"]
    #@schema/nullable
    externalTrafficPolicy: ""
    #@schema/desc "Annotations to set on the Envoy service."
    #@schema/type any=True
    #@schema/nullable
    annotations: {}
    #@schema/desc "NodePort settings for the Envoy service. If type is not `NodePort` or `LoadBalancer`, these settings are ignored."
    nodePorts:
      #@schema/desc "The node port number to expose Envoy's HTTP listener on. If not specified, a node port will be auto-assigned by Kubernetes."
      http: 0
      #@schema/desc "The node port number to expose Envoy's HTTPS listener on. If not specified, a node port will be auto-assigned by Kubernetes."
      https: 0
    #@schema/desc "AWS-specific settings for the Envoy service. If `infrastructureProvider` is not `aws`, these settings are ignored."
    aws:
      #@schema/desc "The type of AWS load balancer to provision. Options are 'classic' and 'nlb'."
      #@schema/validation one_of=["classic", "nlb"]
      loadBalancerType: classic

#@schema/desc "TLS configuration to secure the communication between Contour and Envoy."
certificates:
  #@schema/desc "Whether to use cert-manager to provision TLS certificates for securing the communication between Contour and Envoy. If `false`, the `contour-certgen` Job will be used to provision certificates. If `true`, cert-manager must be installed in the cluster. See: https://github.com/kadras-io/package-for-cert-manager."
  useCertManager: false
  #@schema/desc "If using cert-manager, how long the certificates should be valid for. If `useCertManager` is false, this field is ignored."
  #@schema/validation min_len=2, when=lambda _, ctx: ctx.parent["useCertManager"]
  duration: 8760h
  #@schema/desc "If using cert-manager, how long before expiration the certificates should be renewed. If `useCertManager` is false, this field is ignored."
  #@schema/validation min_len=2, when=lambda _, ctx: ctx.parent["useCertManager"]
  renewBefore: 360h
